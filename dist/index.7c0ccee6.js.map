{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,MAAM,YAAY,SAAS,cAAc,CAAC;IAC1C,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAE/C,0BAA0B;IAC1B,MAAM,aAAa;QACjB,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;YAE1E,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,eAAe,SAAS,GAAG,IAAI,uBAAuB;YAEtD,+CAA+C;YAC/C,MAAM,KAAK,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC,MAAM;gBACrC,MAAM,UAAU,SAAS,aAAa,CAAC;gBACvC,QAAQ,SAAS,GAAG;gBACpB,QAAQ,SAAS,GAAG,CAAC;cACf,EAAE,KAAK,KAAK,IAAI,WAAW;aAC5B,EAAE,KAAK,OAAO,CAAC;QACpB,CAAC;gBACD,eAAe,WAAW,CAAC;YAC7B;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,eAAe,SAAS,GAAG;QAC7B;IACF;IAEA,iBAAiB;IACjB,MAAM,UAAU,OAAO,YAAY;QACjC,IAAI,CAAC,aAAa,IAAI,IAAI;YACxB,MAAM;YACN;QACF;QAEA,MAAM,UAAU;YAAE,OAAO,WAAW,IAAI,MAAM;YAAY,SAAS,aAAa,IAAI;QAAG;QAEvF,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,+BAA+B;gBAC1D,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,YAAY,MAAM,SAAS,IAAI;gBACrC,MAAM,IAAI,MAAM,yBAA0B,CAAA,UAAU,KAAK,IAAI,SAAS,UAAU,AAAD;YACjF;YAEA,MAAM,cAAc,gBAAgB;YACpC,UAAU,SAAS,GAAG,IAAI,wBAAwB;YAClD,YAAY,SAAS,GAAG,IAAI,0BAA0B;QACxD,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC;YACd,MAAM;QACR;IACF;IAEA,yBAAyB;IACzB,SAAS,gBAAgB,CAAC,UAAU,CAAC;QACnC,MAAM,cAAc;QACpB,MAAM,QAAQ,UAAU,SAAS,CAAC,IAAI;QACtC,MAAM,UAAU,YAAY,SAAS,CAAC,IAAI;QAC1C,QAAQ,OAAO;IACjB;IAEA,gBAAgB;IAChB;AACF","sources":["app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  const noteForm = document.getElementById(\"noteForm\");\n  const noteTitle = document.getElementById(\"noteTitle\");\n  const noteContent = document.getElementById(\"noteContent\");\n  const notesContainer = document.getElementById(\"notesContainer\");\n\n  // Fetch and display notes\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/notes\");\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      \n      const notes = await response.json();\n      notesContainer.innerHTML = \"\"; // Clear existing notes\n      \n      // Reverse the notes array to show newest first\n      notes.slice().reverse().forEach((note, index) => {\n        const noteDiv = document.createElement(\"div\");\n        noteDiv.className = \"note\";\n        noteDiv.innerHTML = `\n          <h3>${note.title || \"Untitled\"}</h3>\n          <p>${note.content}</p>\n        `;\n        notesContainer.appendChild(noteDiv);\n      });\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      notesContainer.innerHTML = \"<p>Error loading notes.</p>\";\n    }\n  };\n\n  // Add a new note\n  const addNote = async (titleInput, contentInput) => {\n    if (!contentInput.trim()) {\n      alert(\"Note content cannot be empty!\");\n      return;\n    }\n\n    const newNote = { title: titleInput.trim() || \"Untitled\", content: contentInput.trim() };\n\n    try {\n      const response = await fetch(\"http://localhost:3000/notes\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newNote),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(\"Failed to add note: \" + (errorData.error || response.statusText));\n      }\n\n      await fetchNotes(); // Refresh notes\n      noteTitle.innerHTML = \"\"; // Clear the title field\n      noteContent.innerHTML = \"\"; // Clear the content field\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while adding the note.\");\n    }\n  };\n\n  // Handle form submission\n  noteForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const title = noteTitle.innerHTML.trim();\n    const content = noteContent.innerHTML.trim();\n    addNote(title, content);\n  });\n\n  // Initial fetch\n  fetchNotes();\n});"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}