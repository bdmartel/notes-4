{"mappings":"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","sources":["app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  const noteForm = document.getElementById(\"noteForm\");\n  const noteTitle = document.getElementById(\"noteTitle\");\n  const noteContent = document.getElementById(\"noteContent\");\n  const notesContainer = document.getElementById(\"notesContainer\");\n  const editForm = document.getElementById(\"editForm\");\n  const editTitle = document.getElementById(\"editTitle\");\n  const editContent = document.getElementById(\"editContent\");\n  const cancelEdit = document.getElementById(\"cancelEdit\");\n\n  let notes = [];\n  let currentEditIndex = null;\n\n  // Fetch and display notes\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/notes\");\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      \n      notes = await response.json();\n      renderNotes();\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n      notesContainer.innerHTML = \"<p>Error loading notes.</p>\";\n    }\n  };\n\n  // Render Notes\n  const renderNotes = () => {\n    notesContainer.innerHTML = \"\"; // Clear existing notes\n    notes.slice().reverse().forEach((note, index) => {\n      const noteDiv = document.createElement(\"div\");\n      noteDiv.className = \"note\";\n      noteDiv.innerHTML = `\n        <h3>${note.title || \"Untitled\"}</h3>\n        <p>${note.content}</p>\n        <button class=\"edit-btn\" data-id=\"${index}\">Edit</button>\n      `;\n      notesContainer.appendChild(noteDiv);\n    });\n    addEditListeners();\n  };\n\n  // Add listeners for editing notes\n  const addEditListeners = () => {\n    const editButtons = document.querySelectorAll(\".edit-btn\");\n    editButtons.forEach((button) => {\n      button.addEventListener(\"click\", () => {\n        currentEditIndex = button.dataset.id;\n        const note = notes[currentEditIndex];\n        editTitle.value = note.title;\n        editContent.value = note.content;\n        editForm.style.display = \"block\";\n        noteForm.style.display = \"none\";\n      });\n    });\n  };\n\n  // Add a new note\n  const addNote = async (titleInput, contentInput) => {\n    if (!contentInput.trim()) {\n      alert(\"Note content cannot be empty!\");\n      return;\n    }\n\n    const newNote = { title: titleInput.trim() || \"Untitled\", content: contentInput.trim() };\n\n    try {\n      const response = await fetch(\"http://localhost:3000/notes\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newNote),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add note\");\n\n      await fetchNotes(); // Refresh notes\n      noteTitle.value = \"\"; // Clear the title field\n      noteContent.value = \"\"; // Clear the content field\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while adding the note.\");\n    }\n  };\n\n  // Edit an existing note\n  const editNote = async (index, updatedNote) => {\n    notes[index] = updatedNote;\n\n    try {\n      const response = await fetch(\"http://localhost:3000/notes\", {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(notes),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to update note\");\n\n      fetchNotes();\n      editForm.style.display = \"none\";\n      noteForm.style.display = \"block\";\n    } catch (error) {\n      console.error(error);\n      alert(\"An error occurred while updating the note.\");\n    }\n  };\n\n  // Handle Edit Form Submission\n  editForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const updatedNote = {\n      title: editTitle.value.trim() || \"Untitled\",\n      content: editContent.value.trim(),\n    };\n\n    if (!updatedNote.content) {\n      alert(\"Note content cannot be empty!\");\n      return;\n    }\n\n    editNote(currentEditIndex, updatedNote);\n  });\n\n  // Handle Cancel Edit\n  cancelEdit.addEventListener(\"click\", () => {\n    editForm.style.display = \"none\";\n    noteForm.style.display = \"block\";\n  });\n\n  // Handle New Note Form Submission\n  noteForm.addEventListener(\"submit\", (event) => {\n    event.preventDefault();\n    const title = noteTitle.value.trim();\n    const content = noteContent.value.trim();\n    addNote(title, content);\n  });\n\n  // Initial fetch\n  fetchNotes();\n});"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}