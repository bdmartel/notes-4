{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC5C,MAAM,iBAAiB,SAAS,cAAc,CAAC;IAC/C,MAAM,WAAW,SAAS,cAAc,CAAC;IACzC,MAAM,YAAY,SAAS,cAAc,CAAC;IAC1C,MAAM,cAAc,SAAS,cAAc,CAAC;IAE5C,MAAM,UAAU;IAEhB,0BAA0B;IAC1B,MAAM,aAAa;QACjB,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAElC,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,YAAY;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;QACzC;IACF;IAEA,eAAe;IACf,MAAM,cAAc,CAAC;QACnB,eAAe,SAAS,GAAG,IAAI,uBAAuB;QACtD,MAAM,OAAO,CAAC,CAAC,MAAM;YACnB,MAAM,UAAU,SAAS,aAAa,CAAC;YACvC,QAAQ,SAAS,GAAG;YACpB,QAAQ,SAAS,GAAG,CAAC;4CACiB,EAAE,MAAM,qBAAqB,EAAE,KAAK,KAAK,CAAC;2CAC3C,EAAE,MAAM,uBAAuB,EAAE,KAAK,OAAO,CAAC;0CAC/C,EAAE,MAAM;MAC5C,CAAC;YAED,oBAAoB;YACpB,QAAQ,aAAa,CAAC,aAAa,gBAAgB,CAAC,SAAS;gBAC3D,MAAM,eAAe,QAAQ,aAAa,CAAC,eAAe,WAAW,CAAC,IAAI;gBAC1E,MAAM,iBAAiB,QAAQ,aAAa,CAAC,iBAAiB,WAAW,CAAC,IAAI;gBAE9E,IAAI,CAAC,gBAAgB;oBACnB,MAAM;oBACN;gBACF;gBAEA,IAAI;oBACF,MAAM,WAAW,MAAM,MAAM,GAAG,QAAQ,CAAC,EAAE,OAAO,EAAE;wBAClD,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BAAE,OAAO;4BAAc,SAAS;wBAAe;oBACtE;oBACA,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;oBAElC;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,sBAAsB;gBACtC;YACF;YAEA,eAAe,WAAW,CAAC;QAC7B;IACF;IAEA,eAAe;IACf,SAAS,gBAAgB,CAAC,UAAU,OAAO;QACzC,MAAM,cAAc;QAEpB,MAAM,UAAU;YACd,OAAO,UAAU,KAAK,CAAC,IAAI,MAAM;YACjC,SAAS,YAAY,KAAK,CAAC,IAAI;QACjC;QAEA,IAAI,CAAC,QAAQ,OAAO,EAAE;YACpB,MAAM;YACN;QACF;QAEA,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,SAAS;gBACpC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,IAAI,MAAM;YAElC,UAAU,KAAK,GAAG,IAAI,cAAc;YACpC,YAAY,KAAK,GAAG,IAAI,iBAAiB;YACzC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,sBAAsB;QACtC;IACF;IAEA,gBAAgB;IAChB;AACF","sources":["app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  const notesContainer = document.getElementById(\"notesContainer\");\n  const noteForm = document.getElementById(\"noteForm\");\n  const noteTitle = document.getElementById(\"noteTitle\");\n  const noteContent = document.getElementById(\"noteContent\");\n\n  const API_URL = \"http://localhost:3000/notes\";\n\n  // Fetch and display notes\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) throw new Error(\"Failed to fetch notes\");\n\n      const notes = await response.json();\n      renderNotes(notes);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n\n  // Render notes\n  const renderNotes = (notes) => {\n    notesContainer.innerHTML = \"\"; // Clear existing notes\n    notes.forEach((note, index) => {\n      const noteDiv = document.createElement(\"div\");\n      noteDiv.className = \"note\";\n      noteDiv.innerHTML = `\n        <h3 contenteditable=\"true\" data-id=\"${index}\" class=\"note-title\">${note.title}</h3>\n        <p contenteditable=\"true\" data-id=\"${index}\" class=\"note-content\">${note.content}</p>\n        <button class=\"save-btn\" data-id=\"${index}\">Save</button>\n      `;\n\n      // Save note changes\n      noteDiv.querySelector(\".save-btn\").addEventListener(\"click\", async () => {\n        const updatedTitle = noteDiv.querySelector(\".note-title\").textContent.trim();\n        const updatedContent = noteDiv.querySelector(\".note-content\").textContent.trim();\n\n        if (!updatedContent) {\n          alert(\"Note content cannot be empty!\");\n          return;\n        }\n\n        try {\n          const response = await fetch(`${API_URL}/${index}`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ title: updatedTitle, content: updatedContent }),\n          });\n          if (!response.ok) throw new Error(\"Failed to save note\");\n\n          fetchNotes();\n        } catch (error) {\n          console.error(\"Error saving note:\", error);\n        }\n      });\n\n      notesContainer.appendChild(noteDiv);\n    });\n  };\n\n  // Add new note\n  noteForm.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    const newNote = {\n      title: noteTitle.value.trim() || \"Untitled\",\n      content: noteContent.value.trim(),\n    };\n\n    if (!newNote.content) {\n      alert(\"Note content cannot be empty!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newNote),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add note\");\n\n      noteTitle.value = \"\"; // Clear input\n      noteContent.value = \"\"; // Clear textarea\n      fetchNotes();\n    } catch (error) {\n      console.error(\"Error adding note:\", error);\n    }\n  });\n\n  // Initial fetch\n  fetchNotes();\n});"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}