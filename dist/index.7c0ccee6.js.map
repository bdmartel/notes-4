{"mappings":"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","sources":["app.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\n  const notesContainer = document.getElementById(\"notesContainer\");\n  const noteForm = document.getElementById(\"noteForm\");\n  const noteTitle = document.getElementById(\"noteTitle\");\n  const noteContent = document.getElementById(\"noteContent\");\n\n  const API_URL = \"http://localhost:3000/notes\";\n\n  // Fetch and display notes\n  const fetchNotes = async () => {\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) throw new Error(\"Failed to fetch notes\");\n\n      const notes = await response.json();\n      console.log(\"Fetched Notes:\", notes); // Debugging log\n      renderNotes(notes);\n    } catch (error) {\n      console.error(\"Error fetching notes:\", error);\n    }\n  };\n\n  // Render notes\n// Render notes\nconst renderNotes = (notes) => {\n  notesContainer.innerHTML = \"\"; // Clear existing notes\n\n  // Reverse the order of notes to show newest first\n  notes.slice().reverse().forEach((note, index) => {\n    const noteDiv = document.createElement(\"div\");\n    noteDiv.className = \"note\";\n    noteDiv.innerHTML = `\n      <h3>${note.title || \"Untitled\"}</h3>\n      <p>${note.content}</p>\n      <button class=\"edit-btn\" data-id=\"${index}\">Edit</button>\n      <button class=\"download-btn\" data-id=\"${index}\">Download JSON</button>\n    `;\n\n    // Add event listener for editing\n    noteDiv.querySelector(\".edit-btn\").addEventListener(\"click\", () => {\n      const editForm = `\n        <input type=\"text\" class=\"edit-title\" value=\"${note.title || \"Untitled\"}\" />\n        <textarea class=\"edit-content\">${note.content}</textarea>\n        <button class=\"save-btn\" data-id=\"${index}\">Save</button>\n        <button class=\"cancel-btn\">Cancel</button>\n      `;\n      noteDiv.innerHTML = editForm;\n\n      // Add save functionality\n      noteDiv.querySelector(\".save-btn\").addEventListener(\"click\", async () => {\n        const updatedTitle = noteDiv.querySelector(\".edit-title\").value.trim();\n        const updatedContent = noteDiv.querySelector(\".edit-content\").value.trim();\n\n        if (!updatedContent) {\n          alert(\"Note content cannot be empty!\");\n          return;\n        }\n\n        try {\n          const response = await fetch(`${API_URL}/${index}`, {\n            method: \"PUT\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ title: updatedTitle, content: updatedContent }),\n          });\n\n          if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || \"Failed to save note\");\n          }\n\n          console.log(\"Note updated successfully\");\n          fetchNotes(); // Refresh notes\n        } catch (error) {\n          console.error(\"Error saving note:\", error);\n          alert(\"Failed to save the note. Please try again.\");\n        }\n      });\n\n      // Add cancel functionality\n      noteDiv.querySelector(\".cancel-btn\").addEventListener(\"click\", () => {\n        renderNotes(notes); // Re-render notes to reset the view\n      });\n    });\n\n    // Add event listener for downloading JSON\n    noteDiv.querySelector(\".download-btn\").addEventListener(\"click\", () => {\n      downloadJSON(note, `note-${index + 1}.json`);\n    });\n\n    notesContainer.appendChild(noteDiv);\n  });\n};\n\n// Download note as JSON\nconst downloadJSON = (data, filename) => {\n  const jsonBlob = new Blob([JSON.stringify(data, null, 2)], { type: \"application/json\" });\n  const url = URL.createObjectURL(jsonBlob);\n\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n};\n\n  // Add a new note\n  noteForm.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    const newNote = {\n      title: noteTitle.value.trim() || \"Untitled\",\n      content: noteContent.value.trim(),\n    };\n\n    if (!newNote.content) {\n      alert(\"Note content cannot be empty!\");\n      return;\n    }\n\n    try {\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(newNote),\n      });\n\n      if (!response.ok) throw new Error(\"Failed to add note\");\n\n      console.log(\"Note added successfully\");\n      noteTitle.value = \"\"; // Clear inputs\n      noteContent.value = \"\";\n      fetchNotes(); // Refresh notes\n    } catch (error) {\n      console.error(\"Error adding note:\", error);\n    }\n  });\n\n  // Initial fetch\n  fetchNotes();\n});"],"names":[],"version":3,"file":"index.7c0ccee6.js.map","sourceRoot":"/__parcel_source_root/"}